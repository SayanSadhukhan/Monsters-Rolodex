{"version":3,"sources":["components/cards/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","width","height","alt","name","email","Cardlist","console","log","monsters","map","SearchBox","placeholder","changeHandler","type","onChange","App","state","searchfield","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,gCAA0EC,MAAM,MAAMC,OAAO,MAAMC,IAAI,YAC/G,6BAAKP,EAAMG,QAAQK,OACnB,4BAAIR,EAAMG,QAAQM,YCHbC,EAAW,SAAAV,GAEpB,OADAW,QAAQC,IAAIZ,GACL,qBAAKC,UAAY,WAAjB,SAEHD,EAAMa,SAASC,KAAI,SAACX,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLjBW,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,cAAd,OAEpB,uBAAOC,KAAK,SACZF,YAAaA,EACbG,SAAUF,EACVhB,UAAW,aCmDAmB,G,wDAtDb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTR,SAAS,GACTS,YAAY,IALH,E,qDAyBf,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAeA,EAASC,UAC7BF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAACf,SAASc,S,oBAGxC,WAAS,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQK,KAAKwB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UAEA,qDAEA,cAAC,EAAD,CACAe,YAAY,kBACZC,cAAe,SAAAiB,GAAC,OAAG,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAIxD,cAAC,EAAD,CAAUvB,SAAUiB,W,GAjDRO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.230ac23d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&%20size=%20180*180`} width=\"186\" height=\"186\" alt=\"monster\"/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n\r\n// {`https://robohash.org/${props.monster.id}?set=set2&%20size=%20180*180`}","import React from 'react';\r\nimport cardliststyles from './card-list.styles.css'\r\nimport {Card} from '../cards/card.component.jsx'\r\n\r\nexport const Cardlist = props =>{\r\n    console.log(props);\r\n    return <div className = \"cardlist\">\r\n        {\r\n        props.monsters.map((monster)=>(\r\n           <Card key={monster.id} monster={monster}/>\r\n        ))\r\n        }\r\n        </div>\r\n}; ","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox =({placeholder,changeHandler})=> (\r\n\r\n    <input type=\"search\"\r\n    placeholder={placeholder} \r\n    onChange={changeHandler}  \r\n    className ='search'\r\n      // this.setState({searchfield: e.target.value},()=>console.log(this.state.searchfield))\r\n      // with the command we can see the state of searchfield changing instantly.\r\n\r\n    />\r\n\r\n)\r\n\r\n","import React , {Component} from 'react';\nimport {Cardlist} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchfield:'',\n      // monsters:[\n      //   {\n      //     name:'Frankenstine',\n      //     id: 'asc1'\n\n      //   },\n      //   {\n      //     name: 'Dracula',\n      //     id:'asc2'\n      //   },\n      //   {\n      //     name: 'zombie',\n      //     id:'asc3'\n      //   }\n      // ]\n    };\n  }\n  \n  \ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then((response) => (response.json()))\n  .then((users)=>(this.setState({monsters:users})))\n}\n  \n  render(){\n    const {monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchfield.toLowerCase())\n    \n    )\n    return(\n      <div className=\"App\">\n      \n      <h1>Monsters Playground\n      </h1>\n      <SearchBox \n      placeholder='Search Monsters'\n      changeHandler={e =>this.setState({searchfield: e.target.value})}\n      />\n        \n      \n      <Cardlist monsters={filteredMonsters}/>\n    </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}